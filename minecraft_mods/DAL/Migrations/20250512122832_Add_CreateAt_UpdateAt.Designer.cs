// <auto-generated />
using System;
using DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250512122832_Add_CreateAt_UpdateAt")]
    partial class Add_CreateAt_UpdateAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CollectionFocus", b =>
                {
                    b.Property<Guid>("CollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FocusesId")
                        .HasColumnType("uuid");

                    b.HasKey("CollectionsId", "FocusesId");

                    b.HasIndex("FocusesId");

                    b.ToTable("CollectionFocus");
                });

            modelBuilder.Entity("CollectionMod", b =>
                {
                    b.Property<Guid>("CollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModsId")
                        .HasColumnType("uuid");

                    b.HasKey("CollectionsId", "ModsId");

                    b.HasIndex("ModsId");

                    b.ToTable("CollectionMod");
                });

            modelBuilder.Entity("DAL.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DAL.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModLoaderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeToComplete")
                        .HasColumnType("integer");

                    b.Property<Guid>("VersionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("ModLoaderId");

                    b.HasIndex("VersionId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("DAL.Entities.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("DAL.Entities.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("DAL.Entities.Focus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Focuses");
                });

            modelBuilder.Entity("DAL.Entities.Mod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Downloads")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClientside")
                        .HasColumnType("boolean");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Mods");
                });

            modelBuilder.Entity("DAL.Entities.ModLoader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModLoaders");
                });

            modelBuilder.Entity("DAL.Entities.ModVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModVersions");
                });

            modelBuilder.Entity("DAL.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ModModLoader", b =>
                {
                    b.Property<Guid>("ModLoadersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModsId")
                        .HasColumnType("uuid");

                    b.HasKey("ModLoadersId", "ModsId");

                    b.HasIndex("ModsId");

                    b.ToTable("ModModLoader");
                });

            modelBuilder.Entity("ModModVersion", b =>
                {
                    b.Property<Guid>("ModsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionsId")
                        .HasColumnType("uuid");

                    b.HasKey("ModsId", "VersionsId");

                    b.HasIndex("VersionsId");

                    b.ToTable("ModModVersion");
                });

            modelBuilder.Entity("ModTag", b =>
                {
                    b.Property<Guid>("ModsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("ModsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ModTag");
                });

            modelBuilder.Entity("CollectionFocus", b =>
                {
                    b.HasOne("DAL.Entities.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Focus", null)
                        .WithMany()
                        .HasForeignKey("FocusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectionMod", b =>
                {
                    b.HasOne("DAL.Entities.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Mod", null)
                        .WithMany()
                        .HasForeignKey("ModsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Collection", b =>
                {
                    b.HasOne("DAL.Entities.Difficulty", "Difficulty")
                        .WithMany("Collections")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ModLoader", "ModLoader")
                        .WithMany("Collections")
                        .HasForeignKey("ModLoaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ModVersion", "Version")
                        .WithMany("Collections")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("ModLoader");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("ModModLoader", b =>
                {
                    b.HasOne("DAL.Entities.ModLoader", null)
                        .WithMany()
                        .HasForeignKey("ModLoadersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Mod", null)
                        .WithMany()
                        .HasForeignKey("ModsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModModVersion", b =>
                {
                    b.HasOne("DAL.Entities.Mod", null)
                        .WithMany()
                        .HasForeignKey("ModsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.ModVersion", null)
                        .WithMany()
                        .HasForeignKey("VersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModTag", b =>
                {
                    b.HasOne("DAL.Entities.Mod", null)
                        .WithMany()
                        .HasForeignKey("ModsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Difficulty", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("DAL.Entities.ModLoader", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("DAL.Entities.ModVersion", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
